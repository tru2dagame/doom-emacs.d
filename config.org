#+TITLE: Config
#+AUTHOR: Tru Zhou
#+STARTUP: show2levels
#+PROPERTY: header-args :comments yes :results silent

* Contents                                                                      :TOC_5:
:PROPERTIES:
:TOC:      :include all
:END:

- [[#doom-default-config][Doom default config]]
- [[#font][Font]]
- [[#doom-modeline][Doom-modeline]]
  - [[#enabling-doom-modeline-icons-when-using-daemon-mode---sodawaresdforg][Enabling doom-modeline icons when using daemon mode - sodaware.sdf.org]]
- [[#ui][UI]]
  - [[#whitespace][Whitespace]]
  - [[#toggle-transparency][toggle-transparency]]
  - [[#nyan-mode][nyan-mode]]
  - [[#tabs][Tabs]]
  - [[#ivy-postframe][ivy-postframe]]
  - [[#tag-everywhere][Tag everywhere]]
  - [[#window][window]]
  - [[#popper][Popper]]
  - [[#display-line-number][Display Line Number]]
- [[#frame-size][Frame size]]
- [[#fill-column][Fill-column]]
- [[#quickly-visit-emacs-configuration][Quickly visit Emacs configuration]]
- [[#macos][macOS]]
  - [[#define-const-is-a-mac][Define const =is-a-mac=]]
  - [[#keybinding][keybinding]]
  - [[#macos-daemon][macOS Daemon]]
  - [[#others][Others]]
  - [[#dictionary][Dictionary]]
  - [[#quickly-visit-macos-configuration][Quickly visit macOS configuration]]
    - [[#zshrc][zshrc]]
    - [[#zsh-custom-functions][zsh custom functions]]
- [[#editing][Editing]]
  - [[#sudo-edit][sudo edit]]
  - [[#auto-save][Auto Save]]
  - [[#super-save][Super Save]]
  - [[#always-indent-with-spaces][Always indent with spaces]]
  - [[#undo-tree][undo-tree]]
  - [[#undo][undo]]
  - [[#tramp][tramp]]
- [[#isearch-enhancements][isearch enhancements]]
- [[#rg][RG]]
- [[#google-it][Google it]]
- [[#diary][Diary]]
- [[#org][Org]]
  - [[#org-settings-from-purcell][Org settings from purcell]]
  - [[#org-capture-template][Org capture template]]
  - [[#org-mode-automatically-wrap-lines][org-mode automatically wrap lines]]
  - [[#org-note-file][Org note file]]
  - [[#org-agenda-file][Org Agenda File]]
  - [[#org-journal][Org journal]]
  - [[#org-capture-for-alfred][Org Capture for alfred]]
  - [[#visit-daily-org-file][Visit daily org file]]
  - [[#org-ansi][Org ansi]]
  - [[#display-preferences][Display preferences]]
  - [[#ob-async][Ob-async]]
  - [[#ob-tmux][Ob-tmux]]
  - [[#org-rifle][Org-rifle]]
  - [[#org-clock-zone-color][Org clock zone color]]
  - [[#org-babel][Org babel]]
  - [[#org-debug][Org debug]]
  - [[#org-table-valign][Org table valign]]
  - [[#org-roam][Org-roam]]
  - [[#org-mouse][Org-mouse]]
  - [[#org-display-a-single-inline-image][Org display a single inline image]]
  - [[#org-presentation][Org presentation]]
  - [[#auto-babel-tangle][Auto babel tangle]]
  - [[#org-toggle-emphasis][Org-toggle-emphasis]]
- [[#email][Email]]
  - [[#mu4e][+mu4e+]]
  - [[#notmuch][notmuch]]
- [[#deft][Deft]]
- [[#display-ansi-color][Display ansi color]]
- [[#cancelled-recentf][CANCELLED recentf]]
- [[#defhydra][defhydra]]
  - [[#multiple-cursors][multiple-cursors]]
- [[#vterm][vterm]]
- [[#auto-correct-words][Auto-Correct Words]]
- [[#easy-hugo][Easy-hugo]]
- [[#git-auto-commit][Git auto commit]]
- [[#server-mode][Server mode]]
- [[#edit-server][Edit server]]
- [[#chinese][Chinese]]
- [[#macos-open-iterm-in-current-directory][macOS open iTerm in current directory]]
- [[#macros][Macros]]
  - [[#src-example-add-html-details][src-example add html details]]
- [[#magit][Magit]]
  - [[#magit-status-here][magit-status-here]]
  - [[#magit-gitflow][magit-gitflow]]
  - [[#magit-forge][magit forge]]
- [[#graphql][Graphql]]
- [[#eaf-emacs-application-framework][EAF emacs-application-framework]]

* Doom default config
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; refresh' after modifying this file!

;; Key Configuration for Doom as Vanilla Emacs
;;(setq evil-default-state 'emacs)

;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Tru"
      user-mail-address "tru.zhou@gmail.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:

;; (setq doom-font (font-spec :family "Operator Mono SSm" :size 20))
;;(set-face-attribute 'default nil :family "Operator Mono SSm Lig" :weight 'normal)
;(setq doom-font (font-spec :family "Operator Mono SSm Lig" :weight 'normal :size 20))
(setq doom-font (font-spec :family "MesloLGS NF" :weight 'normal :size 20))
(setq doom-unicode-font doom-font)

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. These are the defaults.
;; (setq doom-theme 'doom-one)
;; (load-theme 'doom-one)

;; If you intend to use org, it is recommended you change this!
(setq org-directory "~/Dropbox/Org")

;; If you want to change the style of line numbers, change this to `relative' or
;; `nil' to disable it:
(setq display-line-numbers-type t)
#+end_src

* Font
#+begin_src emacs-lisp
(when (display-graphic-p)
  (add-hook 'window-setup-hook #'+ui/toggle-transparency)
  )
#+end_src

* UI
** Doom-modeline
#+begin_src emacs-lisp
(after! doom-modeline
  (doom-modeline-def-modeline 'my/modeline
    '(bar matches buffer-info remote-host buffer-position parrot selection-info)
    '(misc-info minor-modes checker input-method buffer-encoding major-mode process vcs))
  (defun setup-custom-doom-modeline ()
    (doom-modeline-set-modeline 'my/modeline 'default))
  (add-hook 'doom-modeline-mode-hook 'setup-custom-doom-modeline))

(custom-set-faces!
  '(mode-line :height 180)
  '(mode-line-inactive :height 180))
#+end_src

#+begin_src emacs-lisp
;; (after! doom-modeline
;;   (setq
;;         doom-modeline-height 1
;;         doom-modeline-icon t
;;         doom-modeline-major-mode-icon t
;;         doom-modeline-major-mode-color-icon t
;;         doom-modeline-buffer-state-icon t
;;         doom-modeline-buffer-modification-icon t
;;         doom-modeline-enable-word-count nil
;;         doom-modeline-indent-info t
;;         doom-modeline-workspace-name t)
;;   (set-face-attribute 'mode-line nil :height 180)
;;   (set-face-attribute 'mode-line-inactive nil :height 180)
;; )
#+end_src

*** [[http://sodaware.sdf.org/notes/emacs-daemon-doom-modeline-icons/][Enabling doom-modeline icons when using daemon mode - sodaware.sdf.org]]
#+begin_src emacs-lisp
;; (defun enable-doom-modeline-icons (_frame)
;;   (setq doom-modeline-icon t))
;; (add-hook 'after-make-frame-functions
;;           #'enable-doom-modeline-icons)
#+end_src

* UI
** Whitespace
#+begin_src emacs-lisp
;; (ws-butler-global-mode -1)
;; (setq-default show-trailing-whitespace t)

;; ;;; Whitespace
;; (defun sanityinc/show-trailing-whitespace ()
;;   "Enable display of trailing whitespace in this buffer."
;;   (setq-local show-trailing-whitespace t))
;; (dolist (hook '(prog-mode-hook text-mode-hook conf-mode-hook))
;;   (add-hook hook 'sanityinc/show-trailing-whitespace))
;; (use-package! whitespace-cleanup-mode
;;   :diminish whitespace-cleanup-mode)
;; (add-hook 'after-init-hook 'global-whitespace-cleanup-mode)
;; (global-set-key [remap just-one-space] 'cycle-spacing)
#+end_src

** toggle-transparency
#+begin_src emacs-lisp
(defun +ui/toggle-transparency ()
  (interactive)
  (let ((alpha (frame-parameter nil 'alpha)))
    (set-frame-parameter
      nil 'alpha
      (if (eql (cond ((numberp alpha) alpha)
                     ((numberp (cdr alpha)) (cdr alpha))
                     ;; Also handle undocumented (<active> <inactive>) form.
                     ((numberp (cadr alpha)) (cadr alpha)))
               100)
          '(90 . 80) '(100 . 100)))))

(map!
 "s-u"                         #'+ui/toggle-transparency
 :leader
 :prefix ("t" . "toggle")
 :desc "Transparency"
 :n "t" #'+ui/toggle-transparency)
#+end_src

** nyan-mode
#+begin_src emacs-lisp
(use-package! nyan-mode
  :after doom-modeline
  :init
  (setq nyan-animate-nyancat t
        nyan-wavy-trail t
        nyan-minimum-window-width 81
        nyan-bar-length 24)
  (nyan-mode t))
#+end_src

** Tabs
#+begin_src emacs-lisp
;; (after! centaur-tabs
;;   (centaur-tabs-group-by-projectile-project)
;;   (define-key global-map "\C-q" nil)
;;   (global-set-key (kbd "C-q C-h") 'centaur-tabs-backward)
;;   (global-set-key (kbd "C-q C-l") 'centaur-tabs-forward)
;; )
#+end_src

#+begin_src emacs-lisp
(define-key global-map (kbd "C-q") (make-sparse-keymap))
(global-tab-line-mode 1)
;global-map <C-tab>
(define-key global-map (kbd "C-<tab>") nil)
(global-set-key (kbd "C-<tab>") 'tab-line-switch-to-next-tab)
(global-set-key (kbd "C-S-<tab>") 'tab-line-switch-to-prev-tab)
(tab-bar-mode 1)
(global-set-key (kbd "ESC C-<tab>") 'tab-bar-switch-to-prev-tab)
(global-set-key (kbd "ESC C-S-<tab>") 'tab-bar-switch-to-next-tab)
(global-set-key (kbd "C-q C-q RET") 'tab-bar-select-tab-by-name)
#+end_src

** ivy-postframe
#+begin_src emacs-lisp
(use-package! ivy-posframe
  :after ivy
  :diminish
  :config
  (setq ivy-posframe-display-functions-alist
        '((swiper          . ivy-posframe-display-at-point)
          (complete-symbol . ivy-posframe-display-at-point)
          (t               . ivy-posframe-display-at-frame-top-center))
        ivy-posframe-parameters '((internal-border-width . 10)))
  (setq ivy-posframe-height-alist '((swiper . 20)
                                    (t      . 35)))
  (ivy-posframe-mode 1))
#+end_src

** TODO Tag everywhere
https://gist.github.com/rougier/f0f291f681cb5b95aef5ad51a83166fd
https://www.reddit.com/r/emacs/comments/jc4uou/tags_everywhere/

** window
#+begin_src emacs-lisp
(global-set-key (kbd "M-s-<left>") 'shrink-window-horizontally)
(global-set-key (kbd "M-s-<right>") 'enlarge-window-horizontally)
(global-set-key (kbd "M-s-<down>") 'shrink-window)
(global-set-key (kbd "M-s-<up>") 'enlarge-window)
(setq window-safe-min-height 18)
#+end_src

* Frame size
[[https://www.reddit.com/r/emacs/comments/9c0a4d/tip_setting_initial_frame_size_and_position/][Tip: Setting initial frame size and position : emacs]]
#+begin_src emacs-lisp
;; Set initial frame size and position
;; (defun my/set-initial-frame ()
;;   (let* ((base-factor 0.81)
;; 	(a-width (* (display-pixel-width) base-factor))
;;         (a-height (* (display-pixel-height) base-factor))
;;         (a-left (truncate (/ (- (display-pixel-width) a-width) 2)))
;; 	(a-top (truncate (/ (- (display-pixel-height) a-height) 2))))
;;     (set-frame-position (selected-frame) a-left a-top)
;;     (set-frame-size (selected-frame) (truncate a-width)  (truncate a-height) t)))
;; (setq frame-resize-pixelwise t)
;; (my/set-initial-frame)
#+end_src

#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(top . 10))
(add-to-list 'default-frame-alist '(left . 81))

(add-to-list 'default-frame-alist '(height . 53))
(add-to-list 'default-frame-alist '(width . 153))
;(add-to-list 'default-frame-alist '(top . 10))
;(add-to-list 'default-frame-alist '(top . 81))
#+end_src

* Fill-column

#+begin_src emacs-lisp
;(setq-default fill-column 2000)
#+end_src

* Quickly visit Emacs configuration
#+BEGIN_SRC emacs-lisp
(defun tru/visit-emacs-config ()
  (interactive)
  (find-file "/Users/tru/Dropbox/Apps/emacs/tru/doom-emacs/config.org"))
(global-set-key (kbd "ESC ESC e") 'tru/visit-emacs-config)
#+END_SRC

* macOS
** Define const =is-a-mac=
#+begin_src emacs-lisp
(defconst *is-a-mac* (eq system-type 'darwin))
#+end_src

** keybinding
#+begin_src emacs-lisp
(when *is-a-mac*
  (setq mac-command-modifier 'meta)
  (setq mac-option-modifier 'super)
  ;; Make mouse wheel / trackpad scrolling less jerky
  (setq mouse-wheel-scroll-amount '(1
                                    ((shift) . 5)
                                    ((control))))
  (dolist (multiple '("" "double-" "triple-"))
    (dolist (direction '("right" "left"))
      (global-set-key (read-kbd-macro (concat "<" multiple "wheel-" direction ">")) 'ignore)))
  (global-set-key (kbd "M-`") 'ns-next-frame)
  (global-set-key (kbd "M-h") 'ns-do-hide-emacs)
  (global-set-key (kbd "M-˙") 'ns-do-hide-others)
  )
(global-set-key (kbd "M-v") 'yank)
(global-set-key (kbd "M-V") 'scroll-down)
#+end_src

** macOS Daemon
#+begin_src emacs-lisp
(when *is-a-mac*
  (setq mac-pseudo-daemon-mode 't)
  (mac-pseudo-daemon-mode 1))
#+end_src

** Others
#+begin_src emacs-lisp
;;(global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src

* Editing
** sudo edit
#+BEGIN_SRC emacs-lisp
(use-package! sudo-edit)
#+END_SRC

** Auto Save
#+BEGIN_SRC emacs-lisp
(setq auto-save-visited-file-name t)
(setq auto-save-visited-interval 600)
(auto-save-visited-mode +1)
#+END_SRC

** Super Save
#+begin_src emacs-lisp
(use-package! super-save
  :config
  (super-save-mode +1)
  (setq super-save-auto-save-when-idle t))
#+end_src

** Always indent with spaces
Never use tabs. Tabs are the devil’s whitespace.
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
#+END_SRC

** undo-tree
#+begin_src emacs-lisp
;; (use-package! undo-tree
;;   ;; Branching & persistent undo
;;   :after-call doom-switch-buffer-hook after-find-file
;;   :config
;;   (setq undo-tree-visualizer-diff t
;;         undo-tree-auto-save-history t
;;         undo-tree-enable-undo-in-region t
;;         ;; Increase undo-limits by a factor of ten to avoid emacs prematurely
;;         ;; truncating the undo history and corrupting the tree. See
;;         ;; https://github.com/syl20bnr/spacemacs/issues/12110
;;         undo-limit 800000
;;         undo-strong-limit 12000000
;;         undo-outer-limit 120000000
;;         undo-tree-history-directory-alist
;;         `(("." . ,(concat doom-cache-dir "undo-tree-hist/"))))

;;   ;; Compress undo-tree history files with zstd, if available. File size isn't
;;   ;; the (only) concern here: the file IO barrier is slow for Emacs to cross;
;;   ;; reading a tiny file and piping it in-memory through zstd is *slightly*
;;   ;; faster than Emacs reading the entire undo-tree file from the get go (on
;;   ;; SSDs). Whether or not that's true in practice, we still enjoy zstd's ~80%
;;   ;; file savings (these files add up over time and zstd is so incredibly fast).
;;   (when (executable-find "zstd")
;;     (defadvice! doom--undo-tree-make-history-save-file-name-a (file)
;;       :filter-return #'undo-tree-make-history-save-file-name
;;       (concat file ".zst")))

;;   ;; Strip text properties from undo-tree data to stave off bloat. File size
;;   ;; isn't the concern here; undo cache files bloat easily, which can cause
;;   ;; freezing, crashes, GC-induced stuttering or delays when opening files.
;;   (defadvice! doom--undo-tree-strip-text-properties-a (&rest _)
;;     :before #'undo-list-transfer-to-tree
;;     (dolist (item buffer-undo-list)
;;       (and (consp item)
;;            (stringp (car item))
;;            (setcar item (substring-no-properties (car item))))))

;;   ;; Undo-tree is too chatty about saving its history files. This doesn't
;;   ;; totally suppress it logging to *Messages*, it only stops it from appearing
;;   ;; in the echo-area.
;;   (advice-add #'undo-tree-save-history :around #'doom-shut-up-a)

;;   (global-undo-tree-mode +1))

#+end_src

** undo
#+begin_src emacs-lisp
(after! undo-fu
  (define-key undo-fu-mode-map [remap undo] nil)
  (define-key global-map (kbd "C-/") nil)
  (global-set-key (kbd "C-/") 'undo)
  (global-set-key (kbd "M-z") 'undo-fu-only-undo)
  (global-set-key (kbd "M-Z") 'undo-fu-only-redo)
)
#+end_src

* isearch enhancements
#+begin_src emacs-lisp
(setq search-whitespace-regexp ".*?")
#+end_src

* RG
#+begin_src emacs-lisp
(use-package wgrep
  :config
  (setq wgrep-auto-save-buffer t)
  (setq wgrep-change-readonly-file t))

(use-package! rg
  :after wgrep
  :config
  (setq rg-group-result t)
  (setq rg-hide-command t)
  (setq rg-show-columns nil)
  (setq rg-show-header t)
  (setq rg-custom-type-aliases nil)
  (setq rg-default-alias-fallback "all")

  (rg-define-search rg/grep-vc-or-dir
    :query ask
    :format regexp
    :files "everything"
    :dir (let ((vc (vc-root-dir)))
           (if vc
               vc                         ; search root project dir
             default-directory))          ; or from the current dir
    :confirm prefix
    :flags ("--hidden -g !.git"))

  (defun rg/rg-save-search-as-name ()
    "Save `rg' buffer, naming it after the current search query.

This function is meant to be mapped to a key in `rg-mode-map'."
    (interactive)
    (let ((pattern (car rg-pattern-history)))
      (rg-save-search-as-name (concat "«" pattern "»"))))

  :bind (
         :map rg-mode-map
         ("s" . rg/rg-save-search-as-name)
         ("C-n" . next-line)
         ("C-p" . previous-line)
         ("M-n" . rg-next-file)
         ("M-p" . rg-prev-file)))
#+end_src

* Google it
#+BEGIN_SRC emacs-lisp
(use-package! google-this
  :diminish google-this-mode
  :bind-keymap ("ESC ESC 1" . google-this-mode-submap))
#+END_SRC

* Org :org:
** Org settings from purcell
#+begin_src emacs-lisp
(after! org
;; Various preferences
(setq org-log-done t
      org-log-into-drawer t
      org-edit-timestamp-down-means-later t
      org-hide-emphasis-markers t
      org-catch-invisible-edits 'show
      org-export-coding-system 'utf-8
      org-fast-tag-selection-single-key 'expert
      org-html-validation-link nil
      org-export-kill-product-buffer-when-displayed t
      org-tags-column 80)

(setq org-support-shift-select t)
(setq org-refile-use-cache nil)
)

;; Re-align tags when window shape changes
(after! 'org-agenda
  (add-hook 'org-agenda-mode-hook
            (lambda () (add-hook 'window-configuration-change-hook 'org-agenda-align-tags nil t))))

(after! org
;;; To-do settings
;; (setq org-todo-keywords
;;       (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!/!)")
;;               (sequence "PROJECT(p)" "|" "DONE(d!/!)" "CANCELLED(c@/!)")
;;               (sequence "WAITING(w@/!)" "DELEGATED(e!)" "HOLD(h)" "|" "CANCELLED(c@/!)")))
;;       org-todo-repeat-to-state "NEXT")

;; (setq org-todo-keyword-faces
;;       (quote (("NEXT" :inherit warning)
;;               ("PROJECT" :inherit font-lock-string-face))))

(setq-default org-agenda-clockreport-parameter-plist '(:link t :maxlevel 3))


;; (let ((active-project-match "-INBOX/PROJECT"))

;;   (setq org-stuck-projects
;;         `(,active-project-match ("NEXT")))

;;   (setq org-agenda-compact-blocks t
;;         org-agenda-sticky t
;;         org-agenda-start-on-weekday nil
;;         org-agenda-span 'day
;;         org-agenda-include-diary nil
;;         org-agenda-sorting-strategy
;;         '((agenda habit-down time-up user-defined-up effort-up category-keep)
;;           (todo category-up effort-up)
;;           (tags category-up effort-up)
;;           (search category-up))
;;         org-agenda-window-setup 'current-window
;;         org-agenda-custom-commands
;;         `(("N" "Notes" tags "NOTE"
;;            ((org-agenda-overriding-header "Notes")
;;             (org-tags-match-list-sublevels t)))
;;           ("g" "GTD"
;;            ((agenda "" nil)
;;             (tags "INBOX"
;;                   ((org-agenda-overriding-header "Inbox")
;;                    (org-tags-match-list-sublevels nil)))
;;             (stuck ""
;;                    ((org-agenda-overriding-header "Stuck Projects")
;;                     (org-agenda-tags-todo-honor-ignore-options t)
;;                     (org-tags-match-list-sublevels t)
;;                     (org-agenda-todo-ignore-scheduled 'future)))
;;             (tags-todo "-INBOX"
;;                        ((org-agenda-overriding-header "Next Actions")
;;                         (org-agenda-tags-todo-honor-ignore-options t)
;;                         (org-agenda-todo-ignore-scheduled 'future)
;;                         (org-agenda-skip-function
;;                          '(lambda ()
;;                             (or (org-agenda-skip-subtree-if 'todo '("HOLD" "WAITING"))
;;                                 (org-agenda-skip-entry-if 'nottodo '("NEXT")))))
;;                         (org-tags-match-list-sublevels t)
;;                         (org-agenda-sorting-strategy
;;                          '(todo-state-down effort-up category-keep))))
;;             (tags-todo ,active-project-match
;;                        ((org-agenda-overriding-header "Projects")
;;                         (org-tags-match-list-sublevels t)
;;                         (org-agenda-sorting-strategy
;;                          '(category-keep))))
;;             (tags-todo "-INBOX/-NEXT"
;;                        ((org-agenda-overriding-header "Orphaned Tasks")
;;                         (org-agenda-tags-todo-honor-ignore-options t)
;;                         (org-agenda-todo-ignore-scheduled 'future)
;;                         (org-agenda-skip-function
;;                          '(lambda ()
;;                             (or (org-agenda-skip-subtree-if 'todo '("PROJECT" "HOLD" "WAITING" "DELEGATED"))
;;                                 (org-agenda-skip-subtree-if 'nottododo '("TODO")))))
;;                         (org-tags-match-list-sublevels t)
;;                         (org-agenda-sorting-strategy
;;                          '(category-keep))))
;;             (tags-todo "/WAITING"
;;                        ((org-agenda-overriding-header "Waiting")
;;                         (org-agenda-tags-todo-honor-ignore-options t)
;;                         (org-agenda-todo-ignore-scheduled 'future)
;;                         (org-agenda-sorting-strategy
;;                          '(category-keep))))
;;             (tags-todo "/DELEGATED"
;;                        ((org-agenda-overriding-header "Delegated")
;;                         (org-agenda-tags-todo-honor-ignore-options t)
;;                         (org-agenda-todo-ignore-scheduled 'future)
;;                         (org-agenda-sorting-strategy
;;                          '(category-keep))))
;;             (tags-todo "-INBOX"
;;                        ((org-agenda-overriding-header "On Hold")
;;                         (org-agenda-skip-function
;;                          '(lambda ()
;;                             (or (org-agenda-skip-subtree-if 'todo '("WAITING"))
;;                                 (org-agenda-skip-entry-if 'nottodo '("HOLD")))))
;;                         (org-tags-match-list-sublevels nil)
;;                         (org-agenda-sorting-strategy
;;                          '(category-keep))))
;;             ;; (tags-todo "-NEXT"
;;             ;;            ((org-agenda-overriding-header "All other TODOs")
;;             ;;             (org-match-list-sublevels t)))
;;             )))))
)

(add-hook 'org-agenda-mode-hook 'hl-line-mode)

;;; Archiving
(after! org
(setq org-archive-mark-done nil)
(setq org-archive-location "%s_archive::* Archive")
)
#+end_src
** Org capture template
https://www.reddit.com/r/emacs/comments/7zqc7b/share_your_org_capture_templates/
#+begin_src emacs-lisp
(after! org
  (setq org-capture-templates
        (append '(("1" "Tru's Entry")
                  ("1t" "todo" entry (file "~/Dropbox/Org/inbox.org")
                   "* TODO %?\n%U\n" :clock-resume t)
                  ("1n" "note" entry (file "~/Dropbox/Org/notes.org")
                   "* %? :NOTE:\n%U\n%a\n" :clock-resume t)
                  )org-capture-templates))
)
#+end_src
** org-mode automatically wrap lines
#+begin_src emacs-lisp
(after! org
(visual-line-mode 1))
#+end_src

** Org note file
#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-default-notes-file "~/Dropbox/Org/inbox.org"))
#+END_SRC

** Org Agenda File
#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-agenda-files "~/Dropbox/Apps/org-agenda/agenda_files"))
#+END_SRC

** Org Capture for alfred
   https://github.com/ifitzpat/org-capture-popclip-extension/blob/master/el/alfred-org-capture.el

   #+BEGIN_SRC emacs-lisp
     (defvar org-mac-context nil)

     ;;; Use org-mac to get link context and insert it to the captured item
     (add-hook 'org-capture-prepare-finalize-hook
               (lambda ()
                 (when (equal
                        (cdr (assoc 'name (frame-parameters (selected-frame))))
                        "remember")
                   (progn
                     (goto-char (point-max))
                     (if org-mac-context
                         (progn
                           (insert (concat org-mac-context "\n"))
                           (setq org-mac-context nil))
                       nil)
                     (call-interactively 'org-mac-grab-link)))))

     ;;; Delete frame when capture is done
     (add-hook 'org-capture-after-finalize-hook
               (lambda ()
                 (when (equal
                        (cdr (assoc 'name (frame-parameters (selected-frame))))
                        "remember")
                   (delete-frame))))

     ;;; Code:
     (defun make-orgcapture-frame (&optional mytext)
       "Create a new frame and run org-capture."
       (interactive)
       (setq org-mac-context mytext)
       (make-frame '((name . "remember") (width . 100) (height . 30)
                     (top . 400) (left . 300)
                     ))
       (select-frame-by-name "remember")
       (org-capture))




     ;;     (add-to-list 'default-frame-alist '(height . 39))
     ;;     (add-to-list 'default-frame-alist '(width . 124))

     ;; ;;; Code:
     ;; ;;; https://github.com/jjasghar/alfred-org-capture
     ;; (defun make-orgcapture-frame ()
     ;;   "Create a new frame and run org-capture."
     ;;   (interactive)
     ;;   (make-frame '((name . "remember") (width . 124) (height . 39)
     ;;                 (top . 400) (left . 300)
     ;;                 (font . "Operator Mono SSm")
     ;;                 ))
     ;;   (select-frame-by-name "remember")
     ;;   (org-capture))
   #+END_SRC

** Visit daily org file

   #+BEGIN_SRC emacs-lisp
     (defun tru/visit-my-org-daily ()
       (interactive)
       (find-file "~/Dropbox/Org/daily.org"))
     (global-set-key (kbd "ESC ESC d") 'tru/visit-my-org-daily)
     (defun tru/visit-my-org-inbox ()
       (interactive)
       (find-file "~/Dropbox/Org/inbox.org"))
     (global-set-key (kbd "ESC ESC i") 'tru/visit-my-org-inbox)
   #+END_SRC

** Org ansi
#+begin_src emacs-lisp
(require 'cl)
(defun tru/org-redisplay-ansi-export-blocks ()
  "Refresh the display of ANSI text source blocks."
  (interactive)
  (org-element-map (org-element-parse-buffer) 'export-block
    (lambda (export)
      (when (equalp "ansi" (org-element-property :type export))
        (let ((begin (org-element-property :begin export))
              (end (org-element-property :end export)))
          (ansi-color-apply-on-region begin end))))))

(defun tru/org-redisplay-ansi-example-blocks ()
  "Refresh the display of ANSI text source blocks."
  (interactive)
  (org-element-map (org-element-parse-buffer) 'example-block
    (lambda (example)
      (when (equalp "ansi" (org-element-property :switches example))
        (let ((begin (org-element-property :begin example))
              (end (org-element-property :end example)))
          (ansi-color-apply-on-region begin end))))))

(use-package! org
  :defer t
  :config
  (add-to-list 'org-babel-after-execute-hook #'tru/org-redisplay-ansi-export-blocks)
  (add-to-list 'org-babel-after-execute-hook #'tru/org-redisplay-ansi-example-blocks)
  (org-babel-do-load-languages 'org-babel-load-languages '((shell . t)))
)
#+end_src

example:
#+begin_example
;#+begin_src shell :results output verbatim drawer :wrap export ansi
echo "\e[33mTest text\e[0m"
echo Styles: '\e[3mitalic\e[0m' '\e[1mbold\e[0m' '\e[4munderline\e[0m' '\e[1m\e[3mbolditalics\e[0m'
;#+end_src

;#+RESULTS:
;#+begin_export ansi
Test text
Styles: italic bold underline bolditalics
;#+end_export
#+end_example

** Display preferences

Make TAB act as if it were issued in a buffer of the language's major mode.

#+BEGIN_SRC emacs-lisp
(after! org
(setq org-src-tab-acts-natively t))
#+END_SRC

When editing a code snippet, use the current window rather than popping open a
new one (which shows the same information).

#+BEGIN_SRC emacs-lisp
(after! org
(setq org-src-window-setup 'current-window))
#+END_SRC

Quickly insert a block of elisp:

#+BEGIN_SRC emacs-lisp
(after! org
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp")))
#+END_SRC

** Ob-async
#+begin_src emacs-lisp
(use-package! ob-async)
#+end_src

** Ob-tmux
#+begin_src emacs-lisp
(use-package! ob-tmux)
#+end_src

** Org-rifle
#+begin_src emacs-lisp
(use-package! helm-org-rifle)
#+end_src

** Org clock zone color
https://emacs-china.org/t/org-agenda/8679

#+begin_src emacs-lisp
(defun my:org-agenda-time-grid-spacing ()
  "Set different line spacing w.r.t. time duration."
  (save-excursion
    (let* ((background (alist-get 'background-mode (frame-parameters)))
           (background-dark-p (string= background "dark"))
           (colors (if background-dark-p
                       (list "#aa557f" "DarkGreen" "DarkSlateGray" "DarkSlateBlue")
                     (list "#F6B1C3" "#FFFF9D" "#BEEB9F" "#ADD5F7")))
           pos
           duration)
      (nconc colors colors)
      (goto-char (point-min))
      (while (setq pos (next-single-property-change (point) 'duration))
        (goto-char pos)
        (when (and (not (equal pos (point-at-eol)))
                   (setq duration (org-get-at-bol 'duration)))
          (let ((line-height (if (< duration 30) 1.0 (+ 0.5 (/ duration 60))))
                (ov (make-overlay (point-at-bol) (1+ (point-at-eol)))))
            (overlay-put ov 'face `(:background ,(car colors)
                                                :foreground
                                                ,(if background-dark-p "black" "white")))
            (setq colors (cdr colors))
            (overlay-put ov 'line-height line-height)
            (overlay-put ov 'line-spacing (1- line-height))))))))

(add-hook 'org-agenda-finalize-hook #'my:org-agenda-time-grid-spacing)
#+end_src

** Org babel
Unset ~org-babel-execute-buffer~ keybinding
because I thought its dangerous.
#+begin_src emacs-lisp
(define-key helm-org-rifle-occur-map "\C-c\C-v\C-b" nil)
(define-key helm-org-rifle-occur-map "\C-c\C-vb" nil)
(define-key org-babel-map "\C-b" nil)
(define-key org-babel-map "b" nil)
(define-key org-mode-map "\C-c\C-v\C-b" nil)
(define-key org-mode-map "\C-c\C-vb" nil)
#+end_src

** Org debug
#+begin_src emacs-lisp
;; debug
(defun tru/tt-parse-buff ()
  "2019-01-14"
  (interactive)
  (let ((tt (org-element-parse-buffer )))
    (with-output-to-temp-buffer "*xah temp out*"
      (print tt))))

(defun tru/tt-headline ()
  "2019-01-14"
  (interactive)
  (let ((tt (org-element-parse-buffer 'headline )))
    (with-output-to-temp-buffer "*xah temp out*"
      (print tt))))

#+end_src

** Org table valign
https://emacs-china.org/t/org-mode/13248

#+begin_src emacs-lisp
(use-package! valign)
#+end_src

** Org-roam

#+begin_src emacs-lisp
(setq org-roam-directory "/Users/tru/Dropbox/Org/uid/")
#+end_src

** Org-mouse

#+begin_src emacs-lisp
(after! org
  (setq org-modules
        (append '(
                  org-mouse
                  )org-modules)))
#+end_src

** Org display a single inline image
[[https://www.reddit.com/r/orgmode/comments/hx5keh/display_a_single_inline_image/][Display a single inline image : orgmode]]

#+begin_src emacs-lisp
;;(defun org-display-inline-images (&optional include-linked refresh beg end))
#+end_src

** Org presentation
https://github.com/daviwil/dotfiles/blob/master/Emacs.org#presentations
#+begin_src emacs-lisp
(defun dw/org-start-presentation ()
  (interactive)
  (org-tree-slide-mode 1)
  (setq text-scale-mode-amount 1)
  (text-scale-mode 1)
  (global-tab-line-mode 0)
  (tab-bar-mode 0))

(defun dw/org-end-presentation ()
  (interactive)
  (text-scale-mode 0)
  (org-tree-slide-mode 0)
  (global-tab-line-mode 1)
  (tab-bar-mode 1))

(use-package! org-tree-slide
  :after org
  :functions (org-display-inline-images
              org-remove-inline-images)
  :bind (:map org-mode-map
         ("<f8>" . dw/org-start-presentation)
         :map org-tree-slide-mode-map
         ("C-q" . dw/org-end-presentation)
         ("<right>" . org-tree-slide-move-next-tree)
         ("<left>" . org-tree-slide-move-previous-tree))
  :config
  (setq org-tree-slide-slide-in-effect nil
        org-tree-slide-activate-message "Presentation started."
        org-tree-slide-deactivate-message "Presentation ended."
        org-tree-slide-header t
        org-tree-slide-fold-subtrees-skipped nil
        org-tree-slide-cursor-init nil))
#+end_src

#+begin_src emacs-lisp
(defun dw/org-present-prepare-slide ()
  (org-overview)
  ;; (org-show-entry)
  ;; (org-show-children)
  )

(defun dw/org-present-hook ()
  (setq header-line-format " ")
  (org-display-inline-images)
  (dw/org-present-prepare-slide))

(defun dw/org-present-quit-hook ()
  (setq header-line-format nil)
  (org-present-small)
  (org-remove-inline-images))

(defun dw/org-present-prev ()
  (interactive)
  (org-present-prev)
  (dw/org-present-prepare-slide))

(defun dw/org-present-next ()
  (interactive)
  (org-present-next)
  (dw/org-present-prepare-slide))

(use-package! org-present
  :bind (:map org-present-mode-keymap
         ("C-c C-j" . dw/org-present-next)
         ("C-c C-k" . dw/org-present-prev))
  :hook ((org-present-mode . dw/org-present-hook)
         (org-present-mode-quit . dw/org-present-quit-hook)))
#+end_src
* Email
** +mu4e+
#+begin_src emacs-lisp
;; (require 'mu4e-contrib)
;; (setq mu4e-html2text-command 'mu4e-shr2text)
;; (setq mu4e-html2text-command "iconv -c -t utf-8 | pandoc -f html -t plain")
;; (add-to-list 'mu4e-view-actions '("ViewInBrowser" . mu4e-action-view-in-browser) t)
#+end_src

** notmuch
#+begin_src emacs-lisp
(defun get-string-from-file (filePath)
  "Return filePath's file content."
  (with-temp-buffer
    (insert-file-contents filePath)
    (buffer-string)))

(fset '+notmuch-view-in-mailapp
   (kmacro-lambda-form [?\M-x ?n ?o ?t ?m ?u ?c ?h ?- ?s ?h ?o ?w ?- ?s ?t ?a ?s ?h ?- ?m ?e ?s ?s ?a ?g ?e ?- ?i ?d ?- ?s ?t ?r ?\C-m ?\C-\[ ?! ?o ?p ?e ?n ?  ?m ?e ?s ?s ?a ?g ?e ?: ?/ ?/ ?% ?3 ?C ?\C-y ?% ?3 ?E ?\C-  ?\C-a ?\M-w ?\C-m] 0 "%d"))

(fset '+notmuch-view-in-gmail
   (kmacro-lambda-form [?c ?F ?\M-x ?u ?r ?l ?  ?m ?a ?c ?o ?s ?x return ?j ?j ?\C-  ?\C-a ?\C-d ?\C-y ?j ?j ?j ?\C-\M-b ?\C-\M-b ?\C-\M-b ?\C-\M-f ?\M-b ?\C-  ?\C-a ?\C-d ?\M-f ?\C-k ?\C-a ?h ?t ?t ?p ?s ?: ?/ ?/ ?m ?a ?i ?l ?. ?g ?o ?o ?g ?l ?e ?. ?c ?o ?m ?/ ?m ?a ?i ?l ?? ?# ?a ?l ?l ?/ ?\C-e return] 0 "%d"))
#+end_src

#+begin_src emacs-lisp
(mm-display-parts (mm-dissect-buffer))
#+end_src

#+begin_src emacs-lisp
;; workaround multi database
(when (string-match "work" (get-string-from-file "/Users/tru/Dropbox/Apps/org-agenda/.git/HEAD"))
  (setenv "NOTMUCH_CONFIG" "/Users/tru/Dropbox/Apps/emacs/tru/notmuchmail/ubiquiti/notmuch.conf")
  (setq +notmuch-mail-folder "~/Dropbox/Apps/emacs/tru/notmuchmail/ubiquiti"))
(when (string-match "life" (get-string-from-file "/Users/tru/Dropbox/Apps/org-agenda/.git/HEAD"))
  (setenv "NOTMUCH_CONFIG" "/Users/tru/Dropbox/Apps/emacs/tru/notmuchmail/tru.zhou/notmuch.conf")
  (setq +notmuch-mail-folder "~/Dropbox/Apps/emacs/tru/notmuchmail/tru.zhou"))

(after! notmuch
  (setq mm-text-html-renderer 'w3m)
  (setq w3m-fill-column 72)
  (setq w3m-default-display-inline-images t)
  (setq notmuch-message-headers-visible t)
  (setq notmuch-saved-searches
        '((:name "inbox"      :query "tag:inbox"                    :count-query "tag:inbox and tag:unread"                    :key "i")
          (:name "personal"   :query "tag:inbox and tag:personal"   :count-query "tag:inbox and tag:unread and tag:personal"   :key "p")
          (:name "social"     :query "tag:inbox and tag:social"     :count-query "tag:inbox and tag:unread and tag:social"     :key "o")
          (:name "promotions" :query "tag:inbox and tag:promotions" :count-query "tag:inbox and tag:unread and tag:promotions" :key "r")
          (:name "updates"    :query "tag:inbox and tag:updates"    :count-query "tag:inbox and tag:unread and tag:updates"    :key "u")
          (:name "forums"     :query "tag:inbox and tag:forums"     :count-query "tag:inbox and tag:unread and tag:forums"     :key "f")

          (:name "flagged" :query "tag:flagged" :key "s")
          (:name "sent"    :query "tag:sent"    :key "e")
          (:name "drafts"  :query "tag:draft"   :key "d")))
  (defun =notmuch ()
    "Activate (or switch to) `notmuch' in its workspace."
    (interactive)

    ;; workaround multi database
    (when (string-match "work" (get-string-from-file "/Users/tru/Dropbox/Apps/org-agenda/.git/HEAD"))
      (setenv "NOTMUCH_CONFIG" "/Users/tru/Dropbox/Apps/emacs/tru/notmuchmail/ubiquiti/notmuch.conf")
      (setq +notmuch-mail-folder "~/Dropbox/Apps/emacs/tru/notmuchmail/ubiquiti"))
    (when (string-match "life" (get-string-from-file "/Users/tru/Dropbox/Apps/org-agenda/.git/HEAD"))
      (setenv "NOTMUCH_CONFIG" "/Users/tru/Dropbox/Apps/emacs/tru/notmuchmail/tru.zhou/notmuch.conf")
      (setq +notmuch-mail-folder "~/Dropbox/Apps/emacs/tru/notmuchmail/tru.zhou"))
    (unless (featurep! :ui workspaces)
      (user-error ":ui workspaces is required, but disabled"))
    (condition-case-unless-debug e
        (progn
          (+workspace-switch "*MAIL*" t)
          (if-let* ((buf (cl-find-if (lambda (it) (string-match-p "^\\*notmuch" (buffer-name (window-buffer it))))
                                     (doom-visible-windows))))
              (select-window (get-buffer-window buf))
            (notmuch-search "tag:inbox and tag:unread"))
          (+workspace/display))
      ('error
       (+notmuch/quit)
       (signal (car e) (cdr e)))))

  (define-key notmuch-show-mode-map (kbd ". m") #'+notmuch-view-in-mailapp)
  (define-key notmuch-show-mode-map (kbd ". g") #'+notmuch-view-in-gmail)

  (defun tru/notmuch/update ()
    (interactive)
    ;; create output buffer and jump to beginning
    (let ((buf (get-buffer-create "*notmuch update*")))
      (with-current-buffer buf
        (erase-buffer))
      (pop-to-buffer buf nil t)
      (set-process-sentinel
       (start-process-shell-command
        "notmuch update" buf
        (pcase +notmuch-sync-backend
          (`gmi
           ;&& export DYLD_FALLBACK_LIBRARY_PATH=/opt/homebrew/lib/
           (setenv "DYLD_FALLBACK_LIBRARY_PATH" "")
           (concat "cd " +notmuch-mail-folder " && export DYLD_FALLBACK_LIBRARY_PATH=/opt/homebrew/lib:/usr/local/lib/ && gmi sync && gmi sync"))
          (`custom +notmuch-sync-command)))
       ;; refresh notmuch buffers if sync was successful
       (lambda (_process event)
         (if (string= event "finished\n")
             (notmuch-refresh-all-buffers))))))

  (map! :localleader
        :map (notmuch-search-mode-map notmuch-tree-mode-map notmuch-show-mode-map)
        ;; :desc "Compose email"   "c" #'+notmuch/compose
        :desc "Sync email" "u" #'tru/notmuch/update
        ;; :desc "Quit notmuch"    "q" #'+notmuch/quit
        ;; :map notmuch-search-mode-map
        ;; :desc "Mark as deleted" "d" #'+notmuch/search-delete
        ;; :desc "Mark as spam"    "s" #'+notmuch/search-spam
        ;; :map notmuch-tree-mode-map
        ;; :desc "Mark as deleted" "d" #'+notmuch/tree-delete
        ;; :desc "Mark as spam"    "s" #'+notmuch/tree-spam
        )
  )
#+end_src

#+begin_src emacs-lisp
;; (use-package! notmuch-labeler
;;   :commands notmuch-labeler-rename
;;   :after notmuch
;;   :defer nil
;;   :config
;;   (notmuch-labeler-rename "unread" "new" ':foreground "blue"))

;; Inline images?
(setq mm-attachment-override-types '("image/.*"))
;; Or, like this:
(add-to-list 'mm-attachment-override-types "image/.*")
(setq w3m-default-display-inline-images t)

(defun notmuch-view-html ()
  "Open the HTML parts of a mail in a web browser."
  (interactive)
  (with-current-notmuch-show-message
   (let ((mm-handle (mm-dissect-buffer)))
     (notmuch-foreach-mime-part
      (lambda (p)
        (if (string-equal (mm-handle-media-type p) "text/html")
            (mm-display-external p (lambda ()
                                     (message "Opening web browser...")
                                     (browse-url-of-buffer)
                                     (bury-buffer)))))
      mm-handle))))
#+end_src

#+begin_src emacs-lisp
(defun tru/notmuch-show-toggle-message ()
  (interactive)
  (let ((url (thing-at-point 'url 'no-properties)))
    (if url
      (goto-address-at-point)
      (notmuch-show-toggle-message))))
#+end_src

* Deft
#+begin_src emacs-lisp
(setq deft-directory "~/Dropbox/Org")
#+end_src

* Display ansi color
  #+begin_src emacs-lisp
    (defun tru/display-ansi-colors ()
      (interactive)
      (let ((inhibit-read-only t))
        (ansi-color-apply-on-region (point-min) (point-max))))
  #+end_src
* CANCELLED recentf
CLOSED: [2020-02-26 Wed 03:48]
:LOGBOOK:
- State "CANCELLED"  from              [2020-02-26 Wed 03:48]
:END:
#+begin_src emacs-lisp
;; (add-hook 'after-init-hook 'recentf-mode)
;; (setq-default
;;  recentf-max-saved-items 1000
;;  recentf-exclude '("/tmp/" "/ssh:"))
#+end_src
* defhydra
** multiple-cursors
#+begin_src emacs-lisp
(defhydra hydra-multiple-cursors (:hint nil)
  "
 Up^^             Down^^           Miscellaneous           % 2(mc/num-cursors) cursor%s(if (> (mc/num-cursors) 1) \"s\" \"\")
------------------------------------------------------------------
 [_p_]   Next     [_n_]   Next     [_l_] Edit lines  [_0_] Insert numbers
 [_P_]   Skip     [_N_]   Skip     [_a_] Mark all    [_A_] Insert letters
 [_M-p_] Unmark   [_M-n_] Unmark   [_s_] Search
 [Click] Cursor at point       [_q_] Quit"
  ("l" mc/edit-lines :exit t)
  ("a" mc/mark-all-like-this :exit t)
  ("n" mc/mark-next-like-this)
  ("N" mc/skip-to-next-like-this)
  ("M-n" mc/unmark-next-like-this)
  ("p" mc/mark-previous-like-this)
  ("P" mc/skip-to-previous-like-this)
  ("M-p" mc/unmark-previous-like-this)
  ("s" mc/mark-all-in-region-regexp :exit t)
  ("0" mc/insert-numbers :exit t)
  ("A" mc/insert-letters :exit t)
  ("<mouse-1>" mc/add-cursor-on-click)
  ;; Help with click recognition in this hydra
  ("<down-mouse-1>" ignore)
  ("<drag-mouse-1>" ignore)
  ("q" nil))
#+end_src
* vterm
#+begin_src emacs-lisp
(after! vterm
   (define-key vterm-mode-map (kbd "M-v")                #'vterm-yank)
   ;;(define-key vterm-mode-map [remap whole-line-or-region-yank]                #'vterm-yank)
   (define-key vterm-mode-map (kbd "C-h") nil)
   (define-key vterm-mode-map (kbd "C-h") #'vterm-send-C-h)
   (setq vterm-max-scrollback 20000)
)
#+end_src
* TODO Auto-Correct Words

  =void-function ispell-get-word=

  http://endlessparentheses.com/ispell-and-abbrev-the-perfect-auto-correct.html
  https://www.youtube.com/watch?v=fhI_riv_6HM

  =brew install ispell=

  #+BEGIN_SRC emacs-lisp
    (setq ispell-program-name "/usr/local/bin/ispell")

    (define-key ctl-x-map "\C-i"
      #'endless/ispell-word-then-abbrev)

    (defun endless/simple-get-word ()
      (car-safe (save-excursion (ispell-get-word nil))))

    (defun endless/ispell-word-then-abbrev (p)
      "Call `ispell-word', then create an abbrev for it.
    With prefix P, create local abbrev. Otherwise it will
    be global.
    If there's nothing wrong with the word at point, keep
    looking for a typo until the beginning of buffer. You can
    skip typos you don't want to fix with `SPC', and you can
    abort completely with `C-g'."
      (interactive "P")
      (let (bef aft)
        (save-excursion
          (while (if (setq bef (endless/simple-get-word))
                     ;; Word was corrected or used quit.
                     (if (ispell-word nil 'quiet)
                         nil ; End the loop.
                       ;; Also end if we reach `bob'.
                       (not (bobp)))
                   ;; If there's no word at point, keep looking
                   ;; until `bob'.
                   (not (bobp)))
            (backward-word)
            (backward-char))
          (setq aft (endless/simple-get-word)))
        (if (and aft bef (not (equal aft bef)))
            (let ((aft (downcase aft))
                  (bef (downcase bef)))
              (define-abbrev
                (if p local-abbrev-table global-abbrev-table)
                bef aft)
              (message "\"%s\" now expands to \"%s\" %sally"
                       bef aft (if p "loc" "glob")))
          (user-error "No typo at or before point"))))

    (setq save-abbrevs 'silently)
    (setq-default abbrev-mode t)

  #+END_SRC

* Easy-hugo
#+BEGIN_SRC emacs-lisp
(use-package! easy-hugo
  :init
  ;; Main blog
  (setq easy-hugo-basedir "~/Dropbox/git/github/hugo-blog/")
  (setq easy-hugo-url "https://tru2dagame.github.io")
  (setq easy-hugo-previewtime "300")
  ;; (define-key global-map (kbd "C-c C-e") 'easy-hugo)

  (setq easy-hugo-bloglist
        ;; blog2 setting
        '(((easy-hugo-basedir . "~/Dropbox/git/gitlab/ubnt-hugo-blog/blog-ui/")
           (easy-hugo-url . "http://blog.stg.ui.com.cn")
           )
          ;; blog5 for github pages
          ;; ((easy-hugo-basedir . "~/src/github.com/masasam/githubpages/")
          ;;  (easy-hugo-url . "https://yourid.github.io"))
          ;; ;; blog6 for firebase hosting
          ;; ((easy-hugo-basedir . "~/src/github.com/masasam/firebase/")
          ;;  (easy-hugo-url . "https://yourproject.firebaseapp.com"))

          ))
  ;:bind ("C-c C-e" . easy-hugo)
  )
(define-key global-map "\C-c \C-e" nil)
(define-key mode-specific-map "\C-e" nil)
 #+END_SRC
* TODO Git auto commit
#+begin_src emacs-lisp
(use-package! git-auto-commit-mode
  :config
  ;;(setq shell-command-prompt-show-cwd t)
  (setq-default gac-automatically-push-p t)
  (setq-default gac-debounce-interval 120)
)
#+end_src
* Server mode

#+begin_src emacs-lisp
(use-package! server
  :hook (after-init . server-mode))
#+end_src
* Edit server
https://chrome.google.com/webstore/detail/edit-with-emacs/ljobjlafonikaiipfkggjbhkghgicgoh
#+begin_src emacs-lisp
(use-package! edit-server
  :config
  (edit-server-start)
  (setq edit-server-default-major-mode 'markdown-mode)
  (setq edit-server-new-frame nil)
)
#+end_src
* Chinese
#+begin_src emacs-lisp
(use-package! pinyinlib
  :config

  (defun re-builder-extended-pattern (str)
    (let* ((len (length str)))
      (cond
       ;; do nothing
       ((<= (length str) 0))

       ;; If the first charater of input in ivy is ":",
       ;; remaining input is converted into Chinese pinyin regex.
       ((string= (substring str 0 1) ":")
        (setq str (pinyinlib-build-regexp-string (substring str 1 len) t)))

       ;; If the first charater of input in ivy is "/",
       ;; remaining input is converted to pattrn to search camel case word
       ((string= (substring str 0 1) "/")
        (let* ((rlt "")
               (i 0)
               (subs (substring str 1 len))
               c)
          (when (> len 2)
            (setq subs (upcase subs))
            (while (< i (length subs))
              (setq c (elt subs i))
              (setq rlt (concat rlt (cond
                                     ((and (< c ?a) (> c ?z) (< c ?A) (> c ?Z))
                                      (format "%c" c))
                                     (t
                                      (concat (if (= i 0) (format "[%c%c]" (+ c 32) c)
                                                (format "%c" c))
                                              "[a-z]+")))))
              (setq i (1+ i))))
          (setq str rlt))))
      (ivy--regex-plus str))))
#+end_src

#+begin_src emacs-lisp
(use-package! pinyin-search)
#+end_src

#+begin_src emacs-lisp
(use-package! youdao-dictionary
  :config
  (setq url-automatic-caching t)
  ;; Example Key binding
  (global-set-key (kbd "C-c y") 'youdao-dictionary-search-at-point)
)
#+end_src

* macOS open iTerm in current directory
#+BEGIN_SRC emacs-lisp
(defun my/iterm-goto-filedir-or-home ()
  "Go to present working dir and focus iterm"
  (interactive)
  (do-applescript
   " do shell script \"open -a iTerm\"\n"
   )
  (do-applescript
   (concat
    " tell application \"iTerm\"\n"
    "   tell the current session of current window\n"
    (format "     write text \"cd %s\" \n"
            ;; string escaping madness for applescript
            (replace-regexp-in-string "\\\\" "\\\\\\\\"
                                      (shell-quote-argument (or default-directory "~"))))
    "   end tell\n"
    " end tell\n"
    " do shell script \"open -a iTerm\"\n"
    ))
  )
#+END_SRC

* Macros

** src-example add html details
#+begin_src emacs-lisp
(fset 'tru/details-src-example
   [?\C-s ?# ?+ ?b ?e ?g ?i ?n ?_ ?e ?x ?a ?m ?p ?l ?e ?\C-a ?\C-o ?\C-c ?\C-, ?h ?\C-o ?< ?> ?\C-b ?d ?e ?t ?a ?i ?l ?s ?\C-e ?R ?e ?s ?u ?l ?t ?s ?: ?\C-s ?# ?+ ?e ?n ?d ?_ ?e ?x ?a ?m ?p ?l ?e ?\C-a ?\C-e ?\C-m ?\C-c ?\C-, ?h ?\C-o ?< ?> ?\C-b ?/ ?d ?e ?t ?a ?i ?l ?s ?\C-a ?\C-o ?< ?> ?\C-b ?h ?r ?  ?\C-? ?\C-n ?\C-e ?< ?> ?\C-b ?b ?r ?\C-n])
#+end_src

#+begin_src emacs-lisp
(fset 'tru/details-src-code
   [?\C-s ?# ?+ ?b ?e ?g ?i ?n ?_ ?s ?r ?c ?\C-a ?\M-f ?\M-f ?\C-a ?\C-o ?\C-c ?\C-, ?h ?\C-o ?< ?> ?\C-b ?d ?e ?t ?a ?i ?l ?s ?\C-e ?R ?e ?s ?u ?l ?t ?s ?: ?\C-s ?# ?+ ?e ?n ?d ?_ ?s ?r ?c ?\C-a ?\C-e ?\C-m ?\C-c ?\C-, ?h ?\C-o ?< ?> ?\C-b ?/ ?d ?e ?t ?a ?i ?l ?s ?\C-a ?\C-o ?< ?> ?\C-b ?h ?r ?  ?\C-? ?\C-n ?\C-e ?< ?> ?\C-b ?b ?r ?\C-n])
#+end_src

* Magit

** magit-status-here
#+begin_src emacs-lisp
(global-set-key (kbd "C-x g") 'magit-status-here)
#+end_src

** magit-gitflow
#+begin_src emacs-lisp
(setq magit-gitflow-popup-key "C-c m f")
#+end_src

** TODO magit forge
#+begin_src emacs-lisp
(after! forge
  (add-to-list 'forge-alist '("git.ubnt.com.cn" "git.ubnt.com.cn/api/v4" "git.ubnt.com.cn" forge-gitlab-repository))
  (add-to-list 'forge-alist '("git.uidev.tools" "git.uidev.tools/api/v3" "git.uidev.tools" forge-github-repository))
  (setq auth-sources '("~/.authinfo"))
                                        ;(setq auth-sources '((:source "~/.authinfo")))
  (setq ghub-use-workaround-for-emacs-bug nil)
                                        ;(setq ghub-use-workaround-for-emacs-bug 'force)
  (setq gitlab.user "tru")
  (setq gitlab.host "git.ubnt.com.cn")
  )
(setq auth-sources '("~/.authinfo"))

;; (use-package! ghub)
;; (use-package! forge
;;   :after magit
;;   :config
;;   (add-to-list 'forge-alist '("git.ubnt.com.cn" "git.ubnt.com.cn/api/v4" "git.ubnt.com.cn" forge-gitlab-repository))
;;   (add-to-list 'forge-alist '("git.uidev.tools" "git.uidev.tools/api/v3" "git.uidev.tools" forge-github-repository))
;;   (setq auth-sources '((:source "~/.authinfo")))
;  (setq gitlab.user "tru")
;  (setq gitlab.host "gitlab.git.ubnt.com.cn")

  (setq ghub-use-workaround-for-emacs-bug nil) ;; fixies an issue where are workaround breaks gitlab
  ;; https://github.com/magit/forge/issues/140
  ;; (setq forge-topic-list-columns ;; get more details in the list of topics
  ;;       '(("#" 5
  ;;          (lambda (a b)
  ;;            (> (car a) (car b)))
  ;;          (:right-align t) number nil)
  ;;         ("Title" 35 t nil title  nil)
  ;;         ("Milestone" 4 t nil milestone nil)
  ;;         ("State" 4 t nil state nil)
  ;;         ("Updated" 10 t nill updated nil)
  ;;         ))
  (defun forge-create-secret-auth ()
    "Prompts for and creates the git forge secret. Mostly for gitlab."
    (interactive)
    (let*
        (
         (repo (forge-get-repository 'full))
         (host (oref repo apihost))
         (username (ghub--username host  'gitlab))
         (user (concat username "^forge"))
         token
         )
      (setq token (read-passwd (format "Enter your token for %s @ %s: " username host)))
      (ghub-clear-caches)
      (auth-source-forget-all-cached)
      (secrets-create-item
       "Login" (format "%s @ %s" user host)
       token
       :host host
       :user user
       )
      )
    )
;  )
#+end_src

* Graphql
#+begin_src emacs-lisp
(use-package! graphql-mode)
#+end_src

#+begin_src emacs-lisp
(use-package! ob-graphql)
#+end_src

#+begin_src emacs-lisp
;(use-package! company-graphql
;  :config
;  (add-to-list 'company-backends 'company-graphql))
#+end_src

* EAF emacs-application-framework
#+begin_src emacs-lisp
(use-package! eaf
  :load-path "/Users/tru/Dropbox/git/src/github.com/manateelazycat/emacs-application-framework"
  :init
  (use-package! epc :defer t)
  (use-package! ctable :defer t)
  (use-package! deferred :defer t)
  (use-package! s :defer t)
  :custom
  (eaf-browser-continue-where-left-off t)
  :config
  (eaf-setq eaf-browser-enable-adblocker "true")
  (eaf-bind-key scroll_up "C-n" eaf-pdf-viewer-keybinding)
  (eaf-bind-key scroll_down "C-p" eaf-pdf-viewer-keybinding)
  (eaf-bind-key take_photo "p" eaf-camera-keybinding)
  (eaf-bind-key nil "M-q" eaf-browser-keybinding)) ;; unbind, see more in the Wiki
#+end_src
