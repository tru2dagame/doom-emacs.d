#+TITLE: Config
#+AUTHOR: Tru Zhou
#+STARTUP: show2levels
#+PROPERTY: header-args :comments yes :results silent

* Contents                                                                      :TOC_5:
:PROPERTIES:
:TOC:      :include all
:END:

- [[#doom-default-config][Doom default config]]
- [[#ui][UI]]
  - [[#doom-dashboard-ascii-banner][Doom dashboard ascii banner]]
  - [[#toggle-transparency][toggle-transparency]]
  - [[#nyan-mode][nyan-mode]]
  - [[#tabs][Tabs]]
  - [[#ivy][Ivy]]
    - [[#ivy-orderless][Ivy orderless]]
  - [[#tag-everywhere][Tag everywhere]]
  - [[#window][window]]
  - [[#display-line-number][Display Line Number]]
- [[#frame-size][Frame size]]
- [[#quickly-visit-emacs-configuration][Quickly visit Emacs configuration]]
- [[#macos][macOS]]
  - [[#define-const-is-a-mac][Define const =is-a-mac=]]
  - [[#keybinding][keybinding]]
  - [[#macos-daemon][macOS Daemon]]
  - [[#others][Others]]
  - [[#dictionary][Dictionary]]
  - [[#quickly-visit-macos-configuration][Quickly visit macOS configuration]]
    - [[#zshrc][zshrc]]
    - [[#zsh-custom-functions][zsh custom functions]]
  - [[#org-mac-icalel--import-mac-os-x-icalapp-events-into-emacs-diary][org-mac-iCal.el – import Mac OS X iCal.app events into Emacs diary]]
- [[#editing][Editing]]
  - [[#sudo-edit][sudo edit]]
  - [[#auto-save][Auto Save]]
  - [[#super-save][Super Save]]
  - [[#always-indent-with-spaces][Always indent with spaces]]
  - [[#undo-tree][undo-tree]]
  - [[#tramp][tramp]]
  - [[#rg][rg]]
  - [[#avy-goto-char-2][avy-goto-char-2]]
  - [[#better-jump][better-jump]]
  - [[#isearch-enhancements][isearch enhancements]]

* Doom default config
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; refresh' after modifying this file!

;; Key Configuration for Doom as Vanilla Emacs
;;(setq evil-default-state 'emacs)

;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Tru"
      user-mail-address "tru.zhou@gmail.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:

;; (setq doom-font (font-spec :family "Operator Mono SSm" :size 20))
;;(set-face-attribute 'default nil :family "Operator Mono SSm Lig" :weight 'normal)
;(setq doom-font (font-spec :family "Operator Mono SSm Lig" :weight 'normal :size 20))
(setq doom-font (font-spec :family "MesloLGS NF" :weight 'normal :size 20)
      doom-variable-pitch-font (font-spec :family "MesloLGS NF" :size 20))
(setq doom-unicode-font doom-font)

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. These are the defaults.
;; (setq doom-theme 'doom-one)
;; (load-theme 'doom-one)

;; If you intend to use org, it is recommended you change this!
(setq org-directory "~/Dropbox/Org")

;; If you want to change the style of line numbers, change this to `relative' or
;; `nil' to disable it:
(setq display-line-numbers-type t)
#+end_src

* UI
** Doom dashboard ascii banner

#+begin_example sh
"           _____"
"         ===///    , ,-. ,-   .-, , , ,-  ,_  ,  ,_ ,-"
"         --///    /_ |_/ _)  /''|/|/ |_] /=_ /_ /=_ _)"
"       ___///    __    __  __  ______  ____    ___"
"         ///  --/||  --// .'   //  '/ _//  )) (|  '/"
"     ---///   /' ||  _//.;  __//_.    //_=''  _\\"
"     --///- -/---||  //'||   //  ', _//  ;|     \\     ;"
" _____/// __/_  _||_/<  `||_//__'/ _// --|\ /-._//    /"
"    _///      ,                        ---\\\       .'"
" ___///_____'/                              `;=__.-'"





"                    _..n-'''/''--.._ "
"                 .n' _.-\-''('''--._`-. "
"               ,' .\'   \   `.      ``';. "
"           ___/_-'  |    \    `.         `. "
"         ===///    , ,-. .-   .-; , , ,-  ,L  ,  ,_ ,- "
"         --///    /_ |_/ _)  /''|/|/ |_] /=_ /_ /=_ _) "
"       ___///    __    __  __  ______  ____ |  ___ "
"         ///  --/||  --// .'   //  '/ _//  ))|(|  '/ "
"     ---///   /' ||  _//.;  __//_.    //_=''  _\\ "
"     --///- -/---||  //'||   //  ', _//  ;|     \\     ; "
"______///|__/_  _||_/<  ||_ //__'/ _// --|\ /-._//    / "
"    _///  |   ,   |          \         ---\\\       .' "
" ___///_____'/     \         \             /`;=__.-' "
"            \       \         \           / "
"             `.      \        \         ,' "
"               `.     \        \      ,' "
"                 `-._  \        \ _.-' "
"                     `--\......--' "



#+end_example


#+begin_src emacs-lisp
(defun doom-dashboard-draw-ascii-emacs-banner-fn ()
  (let* ((banner
          '(
"           _____"
"         ===///    , ,-. ,-   .-, , , ,-  ,_  ,  ,_ ,-"
"         --///    /_ |_/ _)  /''|/|/ |_] /=_ /_ /=_ _)"
"       ___///    __    __  __  ______  ____    ___"
"         ///  --/||  --// .'   //  '/ _//  )) (|  '/"
"     ---///   /' ||  _//.;  __//_.    //_=''  _\\"
"     --///- -/---||  //'||   //  ', _//  ;|     \\     ;"
" _____/// __/_  _||_/<  `||_//__'/ _// --|\ /-._//    /"
"    _///      ,                        ---\\\       .'"
" ___///_____'/                              `;=__.-'"
" "
" "

))
         (longest-line (apply #'max (mapcar #'length banner))))
    (put-text-property
     (point)
     (dolist (line banner (point))
       (insert (+doom-dashboard--center
                +doom-dashboard--width
                (concat
                 line (make-string (max 0 (- longest-line (length line)))
                                   32)))
               "\n"))
     'face 'doom-dashboard-banner)))

(unless (display-graphic-p) ; for some reason this messes up the graphical splash screen atm
  (setq +doom-dashboard-ascii-banner-fn #'doom-dashboard-draw-ascii-emacs-banner-fn))
(setq +doom-dashboard-ascii-banner-fn #'doom-dashboard-draw-ascii-emacs-banner-fn)
#+end_src

#+begin_src emacs-lisp :tangle no
(defun my-weebery-is-always-greater ()
  (mapc (lambda (line)
          (insert (propertize (+doom-dashboard--center +doom-dashboard--width line)
                              'face 'doom-dashboard-banner) " ")
          (insert "\n"))
        '(
"█████╗   █████╗ ██╗     ██╗         ██████╗  ██████╗ ███╗   ██╗████████╗    ██╗     ██╗███████╗"
"██╔══██╗██╔══██╗██║     ██║         ██╔══██╗██╔═══██╗████╗  ██║╚══██╔══╝    ██║     ██║██╔════╝"
"██████╔╝███████║██║     ██║         ██║  ██║██║   ██║██╔██╗ ██║   ██║       ██║     ██║█████╗"
"██╔══██╗██╔══██║██║     ██║         ██║  ██║██║   ██║██║╚██╗██║   ██║       ██║     ██║██╔══╝"
"██████╔╝██║  ██║███████╗███████╗    ██████╔╝╚██████╔╝██║ ╚████║   ██║       ███████╗██║███████╗"
"Emacs TRU Edition")))

(setq +doom-dashboard-ascii-banner-fn #'my-weebery-is-always-greater)


(defun my-weebery-is-always-greater ()
  (mapc (lambda (line)
          (insert (propertize (+doom-dashboard--center +doom-dashboard--width line)
                              'face 'doom-dashboard-banner) " ")
          (insert "\n"))
        '(
"           _____"
"         ===///    , ,-. ,-   .-, , , ,-  ,_  ,  ,_ ,-"
"         --///    /_ |_/ _)  /''|/|/ |_] /=_ /_ /=_ _)"
"       ___///    __    __  __  ______  ____    ___"
"         ///  --/||  --// .'   //  '/ _//  )) (|  '/"
"     ---///   /' ||  _//.;  __//_.    //_=''  _\\"
"     --///- -/---||  //'||   //  ', _//  ;|     \\     ;"
" _____/// __/_  _||_/<  ||_ //__'/ _// --|\ /-._//    /"
"    _///      ,                        ---\\\       .'"
" ___///_____'/                              `;=__.-'"

          )))

(setq +doom-dashboard-ascii-banner-fn #'my-weebery-is-always-greater)
#+end_src

** toggle-transparency
#+begin_src emacs-lisp
(when (display-graphic-p)
  (add-hook 'window-setup-hook #'+ui/toggle-transparency)
  )
#+end_src

#+begin_src emacs-lisp
(defun +ui/toggle-transparency ()
  (interactive)
  (let ((alpha (frame-parameter nil 'alpha)))
    (set-frame-parameter
      nil 'alpha
      (if (eql (cond ((numberp alpha) alpha)
                     ((numberp (cdr alpha)) (cdr alpha))
                     ;; Also handle undocumented (<active> <inactive>) form.
                     ((numberp (cadr alpha)) (cadr alpha)))
               100)
          '(90 . 80) '(100 . 100)))))

(map!
 "s-u"                         #'+ui/toggle-transparency
 :leader
 :prefix ("t" . "toggle")
 :desc "Transparency"
 :n "t" #'+ui/toggle-transparency)
#+end_src

** nyan-mode
#+begin_src emacs-lisp
(use-package! nyan-mode
  :after doom-modeline
  :init
  (setq
        ;; nyan-animate-nyancat t
        ;; nyan-wavy-trail t
        nyan-minimum-window-width 81
        nyan-bar-length 24)
  (nyan-mode t))
#+end_src

** Tabs
#+begin_src emacs-lisp
(after! centaur-tabs
  ;;(centaur-tabs-group-by-projectile-project)
  (define-key global-map "\C-q" nil)
  (global-set-key (kbd "C-S-<tab>") 'centaur-tabs-backward)
  (global-set-key (kbd "C-<tab>") 'centaur-tabs-forward)
)
#+end_src

#+begin_src emacs-lisp
;; (define-key global-map (kbd "C-q") (make-sparse-keymap))
;; (global-tab-line-mode 1)
;; ;global-map <C-tab>
;; (define-key global-map (kbd "C-<tab>") nil)
;; (global-set-key (kbd "C-<tab>") 'tab-line-switch-to-next-tab)
;; (global-set-key (kbd "C-S-<tab>") 'tab-line-switch-to-prev-tab)
;; (tab-bar-mode 1)
;; (global-set-key (kbd "ESC C-<tab>") 'tab-bar-switch-to-prev-tab)
;; (global-set-key (kbd "ESC C-S-<tab>") 'tab-bar-switch-to-next-tab)
;; (global-set-key (kbd "C-q C-q RET") 'tab-bar-select-tab-by-name)
#+end_src

** Ivy
#+begin_src emacs-lisp
;; (after! ivy-posframe
;;   (setq ivy-posframe-display-functions-alist
;;         '((swiper          . ivy-posframe-display-at-point)
;;           (complete-symbol . ivy-posframe-display-at-point)
;;           (t               . ivy-posframe-display-at-frame-top-center))
;;         ivy-posframe-parameters '((internal-border-width . 10)))
;;   (setq ivy-posframe-height-alist '((swiper . 20)
;;                                     (t      . 35)))
;;   (ivy-posframe-mode 1))
#+end_src

*** Ivy orderless
https://github.com/oantolin/orderless#ivy

#+begin_src emacs-lisp
(after! ivy
        (add-to-list 'ivy-re-builders-alist '(t . orderless-ivy-re-builder))
        (add-to-list 'ivy-highlight-functions-alist '(orderless-ivy-re-builder . orderless-ivy-highlight))
)
#+end_src

** TODO Tag everywhere
https://gist.github.com/rougier/f0f291f681cb5b95aef5ad51a83166fd
https://www.reddit.com/r/emacs/comments/jc4uou/tags_everywhere/

** window
#+begin_src emacs-lisp
(global-set-key (kbd "M-s-<left>") 'shrink-window-horizontally)
(global-set-key (kbd "M-s-<right>") 'enlarge-window-horizontally)
(global-set-key (kbd "M-s-<down>") 'shrink-window)
(global-set-key (kbd "M-s-<up>") 'enlarge-window)
;(setq window-safe-min-height 18)
#+end_src

helm window size

#+begin_src emacs-lisp
(setq helm-autoresize-max-height 50)
(setq helm-autoresize-min-height 45)
;(helm-autoresize-mode 1)
#+end_src

** Display Line Number
#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
#+end_src

* Frame size
[[https://www.reddit.com/r/emacs/comments/9c0a4d/tip_setting_initial_frame_size_and_position/][Tip: Setting initial frame size and position : emacs]]
#+begin_src emacs-lisp
;; Set initial frame size and position
;; (defun my/set-initial-frame ()
;;   (let* ((base-factor 0.81)
;; 	(a-width (* (display-pixel-width) base-factor))
;;         (a-height (* (display-pixel-height) base-factor))
;;         (a-left (truncate (/ (- (display-pixel-width) a-width) 2)))
;; 	(a-top (truncate (/ (- (display-pixel-height) a-height) 2))))
;;     (set-frame-position (selected-frame) a-left a-top)
;;     (set-frame-size (selected-frame) (truncate a-width)  (truncate a-height) t)))
;; (setq frame-resize-pixelwise t)
;; (my/set-initial-frame)
#+end_src

#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(top . 10))
(add-to-list 'default-frame-alist '(left . 81))

(add-to-list 'default-frame-alist '(height . 50))
(add-to-list 'default-frame-alist '(width . 153))
;(add-to-list 'default-frame-alist '(top . 10))
;(add-to-list 'default-frame-alist '(top . 81))
#+end_src

* Quickly visit Emacs configuration
#+BEGIN_SRC emacs-lisp
(defun tru/visit-emacs-config ()
  (interactive)
  (find-file "/Users/tru/Dropbox/Apps/emacs/tru/doom-emacs/config.org"))
(global-set-key (kbd "ESC ESC e") 'tru/visit-emacs-config)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "ESC ESC ESC") 'doom/switch-to-scratch-buffer)
#+END_SRC

* macOS
** Define const =is-a-mac=
#+begin_src emacs-lisp
(defconst *is-a-mac* (eq system-type 'darwin))
#+end_src

** keybinding
#+begin_src emacs-lisp
(when *is-a-mac*
  (setq mac-command-modifier 'meta)
  (setq mac-option-modifier 'super)
  ;; Make mouse wheel / trackpad scrolling less jerky
  (setq mouse-wheel-scroll-amount '(1
                                    ((shift) . 5)
                                    ((control))))
  (dolist (multiple '("" "double-" "triple-"))
    (dolist (direction '("right" "left"))
      (global-set-key (read-kbd-macro (concat "<" multiple "wheel-" direction ">")) 'ignore)))
  (global-set-key (kbd "M-`") 'ns-next-frame)
  (global-set-key (kbd "M-h") 'ns-do-hide-emacs)
  (global-set-key (kbd "M-˙") 'ns-do-hide-others)
  )
(global-set-key (kbd "M-v") 'yank)
(global-set-key (kbd "M-V") 'scroll-down)
#+end_src

** macOS Daemon
#+begin_src emacs-lisp
(when *is-a-mac*
  (setq mac-pseudo-daemon-mode 't)
  (mac-pseudo-daemon-mode 1))
#+end_src

** Others
#+begin_src emacs-lisp
;;(global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src

** Dictionary
#+begin_src emacs-lisp
;; Support Chinese word
;; (setq osx-dictionary-use-chinese-text-segmentation t)

;; Key bindings
(global-set-key (kbd "C-c d") 'osx-dictionary-search-word-at-point)
;; (global-set-key (kbd "C-c i") 'osx-dictionary-search-input)

;; Work with popwin-el (https://github.com/m2ym/popwin-el)
;; (push "*osx-dictionary*" popwin:special-display-config)
#+end_src

** Quickly visit macOS configuration

*** zshrc
#+begin_src emacs-lisp
(defun tru/visit-custom-dotzshrc ()
  (interactive)
  (find-file "/Users/tru/Dropbox/Dev/configs/zshrc.d/README.org"))
(global-set-key (kbd "ESC ESC z") 'tru/visit-custom-dotzshrc)
#+end_src

*** zsh custom functions
#+begin_src emacs-lisp
(defun tru/visit-custom-functions ()
  (interactive)
  (find-file "/Users/tru/Dropbox/git/src/github.com/Ubiquiti-UID/uid.literate-devops/README.org"))
(global-set-key (kbd "ESC ESC f") 'tru/visit-custom-functions)
#+end_src

** org-mac-iCal.el – import Mac OS X iCal.app events into Emacs diary
https://orgmode.org/worg/org-contrib/org-mac-iCal.html
https://github.com/ndw/org-mac-iCal
#+begin_src emacs-lisp
;; #(use-package! org-mac-iCal)
(load-file "/Users/tru/Dropbox/git/src/github.com/tru2dagame/org-mac-iCal/org-mac-iCal.el")
;; (load-file (locate-library "org-mac-iCal.el"))
(add-to-list 'org-modules 'org-mac-iCal)
(setq org-agenda-include-diary t)
#+end_src

* Editing
** sudo edit
#+BEGIN_SRC emacs-lisp
(use-package! sudo-edit)
#+END_SRC

** Auto Save
#+BEGIN_SRC emacs-lisp
(setq auto-save-visited-file-name t)
(setq auto-save-visited-interval 600)
(auto-save-visited-mode +1)
(setq buffer-save-without-query 't)
#+END_SRC

** Super Save
#+begin_src emacs-lisp
(use-package! super-save
  :config
  (super-save-mode +1)
  (setq super-save-auto-save-when-idle t))
#+end_src

** Always indent with spaces
Never use tabs. Tabs are the devil’s whitespace.
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
#+END_SRC

** undo-tree
#+begin_src emacs-lisp
;; (after! undo-tree
;;   (define-key undo-tree-map (kbd "C-/") nil)
;;   (define-key undo-tree-map (kbd "C-_") nil)
;;   (define-key undo-tree-map [remap undo] nil)
;;   (define-key global-map (kbd "C-/") nil)
;;   (global-set-key (kbd "C-/") 'undo))
#+end_src

** tramp
#+begin_src emacs-lisp
(setq tramp-shell-prompt-pattern "^[^$>\n]*[#$%>] *\\(\[[0-9;]*[a-zA-Z] *\\)*")
#+end_src

** rg
#+begin_src emacs-lisp
(setq counsel-rg-base-command '("rg" "-C" "2" "--max-columns" "240" "--with-filename" "--no-heading" "--line-number" "--color" "never" "%s"))
#+end_src

** avy-goto-char-2
#+begin_src emacs-lisp
;; (global-set-key (kbd "M-s M-s") 'avy-goto-char-timer)
(global-set-key (kbd "M-s M-s") 'avy-goto-char-2)
(setq avy-timeout-seconds 0.35)
(setq avy-all-windows 't)
#+end_src

** better-jump
#+begin_src emacs-lisp
(global-set-key (kbd "C-c j p") 'better-jumper-jump-backward)
(global-set-key (kbd "s-<") 'better-jumper-jump-backward)
(global-set-key (kbd "C-c j n") 'better-jumper-jump-forward)
(global-set-key (kbd "s->") 'better-jumper-jump-forward)
(global-set-key (kbd "C-c j m") 'better-jumper-set-jump)
(global-set-key (kbd "C-c j c") 'better-jumper-clear-jumps)
(global-set-key (kbd "C-c j l") 'better-jumper-jump-newest)
#+end_src

** isearch enhancements
#+begin_src emacs-lisp
(setq search-whitespace-regexp ".*?")
#+end_src
